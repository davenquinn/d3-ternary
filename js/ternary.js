// Generated by CoffeeScript 1.8.0
var ternaryAxes, ternaryPlot, test_data;

test_data = [
  {
    a: 100,
    b: 0,
    c: 0,
    color: '#F00'
  }, {
    a: 0,
    b: 100,
    c: 0,
    color: '#0F0'
  }, {
    a: 0,
    b: 0,
    c: 100,
    color: '#00F'
  }, {
    a: 33,
    b: 33,
    c: 33,
    color: '#999'
  }
];

ternaryPlot = function() {
  var height, line, path, rescale, ternary;
  ternary = {};
  height = Math.sqrt(1 * 1 - 1 / 2 * 1 / 2);
  path = void 0;
  rescale = function(range) {
    if (!range.length) {
      range = [0, 1];
    }
    ternary.scale = d3.scale.linear().domain([0, 1]).range(range);
  };
  line = function(interpolator) {
    if (!interpolator) {
      interpolator = 'linear';
    }
    path = d3.svg.line().x(function(d) {
      return d[0];
    }).y(function(d) {
      return d[1];
    }).interpolate(interpolator);
  };
  rescale([0, 400]);
  line();
  ternary.range = function(range) {
    rescale(range);
    return ternary;
  };
  ternary.point = function(coords) {
    var normalized, pos, sum;
    pos = [0, 0];
    sum = d3.sum(coords);
    if (sum !== 0) {
      normalized = coords.map(function(d) {
        return d / sum;
      });
      pos[0] = ternary.scale(normalized[1] + normalized[2] / 2);
      pos[1] = ternary.scale(height * normalized[0] + height * normalized[1]);
    }
    return pos;
  };
  ternary.line = function(coordsList, accessor, interpolator) {
    var positions;
    if (interpolator) {
      line(interpolator);
    }
    if (!accessor) {
      accessor = function(d) {
        return d;
      };
    }
    positions = coordsList.map(function(d) {
      return ternary.point(accessor(d));
    });
    return path(positions);
  };
  ternary.rule = function(value, axis) {
    var ends;
    console.log(value, axis);
    ends = [];
    if (axis === 0) {
      ends = [[value, 0, 100 - value], [value, 100 - value, 0]];
    } else if (axis === 1) {
      ends = [[0, value, 100 - value], [100 - value, value, 0]];
    } else if (axis === 2) {
      ends = [[0, 100 - value, value], [100 - value, 0, value]];
    }
    return ternary.line(ends);
  };
  ternary.getValues = function(pos) {
    var a, b, c;
    pos = pos.map(ternary.scale.inverse);
    c = 1 - pos[1];
    b = pos[0] - c / 2;
    a = y - b;
    return [a, b, c];
  };
  return ternary;
};

ternaryAxes = function(plot) {
  var axes, defaultTicks, minorTicks, parent, ticks;
  axes = {};
  parent = d3.select('svg');
  defaultTicks = d3.range(0, 101, 25);
  ticks = [defaultTicks, defaultTicks, defaultTicks];
  minorTicks = [[], [], []];
  axes.draw = function(parentSelector) {
    var i, j, major, minor;
    if (parentSelector) {
      parent = d3.select(parentSelector);
    }
    minor = parent.append('g').attr('id', 'minor-ticks');
    major = parent.append('g').attr('id', 'major-ticks');
    i = 0;
    while (i < minorTicks.length) {
      j = 0;
    }
    while (j < minorTicks[i].length) {
      minor.append('path').attr({
        'class': 'ternary-tick minor',
        'd': plot.rule(minorTicks[i][j], i)
      });
      j++;
    }
    i++;
    i = 0;
    while (i < ticks.length) {
      j = 0;
    }
    while (j < ticks[i].length) {
      major.append('path').attr({
        'class': 'ternary-tick',
        'd': plot.rule(ticks[i][j], i)
      });
      j++;
    }
    i++;
  };
  axes.ticks = function(tickArrays) {
    if (!tickArrays) {
      tickArrays = [defaultTicks, defaultTicks, defaultTicks];
    }
    if (!tickArrays[1]) {
      tickArrays[1] = tickArrays[0];
    }
    if (!tickArrays[2]) {
      tickArrays[2] = tickArrays[0];
    }
    ticks = tickArrays;
    return axes;
  };
  axes.minorTicks = function(tickArrays) {
    if (!tickArrays) {
      tickArrays = [[], [], []];
    }
    if (!tickArrays[1]) {
      tickArrays[1] = tickArrays[0];
    }
    if (!tickArrays[2]) {
      tickArrays[2] = tickArrays[0];
    }
    minorTicks = tickArrays;
    return axes;
  };
  return axes;
};
